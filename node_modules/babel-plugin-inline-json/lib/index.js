'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  return {
    visitor: {
      CallExpression: function CallExpression(path, state) {
        var node = path.node;


        if (isMatchedRequireCall(node, state)) {
          var json = readJSON(node, state);

          if (json) {
            replacePath(path, json);
          }
        }
      },
      MemberExpression: function MemberExpression(path, state) {
        var node = path.node;


        if (isMatchedRequireCall(node.object, state)) {
          var json = readJSON(node.object, state);

          if (json) {
            replacePath(path, json[node.property.name]);
          }
        }
      }
    }
  };
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isMatchedRequireCall = function isMatchedRequireCall(node, state) {
  var re = new RegExp(state.opts.matchPattern, 'g');

  return t.isIdentifier(node.callee, { name: 'require' }) && t.isLiteral(node.arguments[0]) && !t.isTemplateLiteral(node.arguments[0]) && node.arguments[0].value.match(re);
};

var readJSON = function readJSON(node, state) {
  var srcPath = _path2.default.resolve(state.file.opts.filename);
  var requireText = node.arguments[0].value;

  var jsonPath = _path2.default.join(srcPath, '..', requireText);
  var json = null;

  if (_fs2.default.existsSync(jsonPath + '.json')) {
    json = require(jsonPath);
  } else {
    var file = _resolve2.default.sync(requireText, {
      basedir: _path2.default.dirname(srcPath)
    });

    if (_fs2.default.existsSync(file)) {
      var fileText = _fs2.default.readFileSync(file, 'utf8');

      try {
        json = JSON.parse(fileText);
      } catch (e) {
        // if unable to JSON.parse, not a JSON file, so, ignore and move on
      }
    }
  }

  return json;
};

var replacePath = function replacePath(path, value) {
  path.replaceWith(t.expressionStatement(t.valueToNode(value)));
};